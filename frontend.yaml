apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: frontend
    release: v1
  name: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        release: v1
    spec:
      # high availability (multi-az)
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: frontend
      dnsPolicy: ClusterFirst
      # pod auto healing
      restartPolicy: Always
      initContainers:
        # wait for apiserver service up
        - name: init-apiserver-service
          image: busybox:1.28
          command:
            - sh
            - -c
            - until nslookup apiserver.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for apiserver service; sleep 2; done
      containers:
        - image: hub.brainupgrade.net/junkin/sba-frontend:demo
          name: sba-frontend
          resources: {}
          ports:
            - containerPort: 80
              name: nginx
          # high availability (TCP probe)
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 1
          readinessProbe:
            httpGet:
              path: /
              port: 80
              httpHeaders:
            initialDelaySeconds: 0
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 1
          startupProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 2
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: ambassador-nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ambassador-nginx-config
data:
  nginx.conf: |
    events{}
    http {
        include /etc/nginx/mime.types;
        server {
            listen 80;
            listen [::]:80 default_server;
            server_name frontend;
            default_type application/octet-stream;
            gzip on;
            gzip_http_version 1.1;
            gzip_disable      "MSIE [1-6]\.";
            gzip_min_length   256;
            gzip_vary         on;
            gzip_proxied      expired no-cache no-store private auth;
            gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            gzip_comp_level   9;
            root /usr/share/nginx/html;
            index index.html index.htm;
            location ^~ /ccuser/ {
              proxy_pass http://apiserver;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header   X-Forwarded-User $http_authorization;
              proxy_set_header X-Forwarded-Proto  $scheme;
              proxy_http_version 1.1;
              proxy_cache_bypass $http_upgrade;
            }
            location ^~ /history/ {
              proxy_pass http://apiserver;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header   X-Forwarded-User $http_authorization;
              proxy_set_header X-Forwarded-Proto  $scheme;
              proxy_http_version 1.1;
              proxy_cache_bypass $http_upgrade;
            }
            location ^~ /catalogue/ {
              proxy_pass http://apiserver;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header   X-Forwarded-User $http_authorization;
              proxy_set_header X-Forwarded-Proto  $scheme;
              proxy_http_version 1.1;
              proxy_cache_bypass $http_upgrade;
            }
            location ^~ /rewards/ {
              proxy_pass http://apiserver;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header   X-Forwarded-User $http_authorization;
              proxy_set_header X-Forwarded-Proto  $scheme;
              proxy_http_version 1.1;
              proxy_cache_bypass $http_upgrade;
            }
        }
    }
