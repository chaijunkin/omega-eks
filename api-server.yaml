apiVersion: v1
kind: Service
metadata:
  labels:
    app: apiserver
  name: apiserver
spec:
  ports:
    - name: 80-8080
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: apiserver
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: apiserver
  name: apiserver
spec:
  replicas: 3
  selector:
    matchLabels:
      app: apiserver
  strategy: {}
  template:
    metadata:
      labels:
        app: apiserver
      # observability setup (metric)
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: /actuator/prometheus
    spec:
      # high availability (multi-az)
      topologySpreadConstraints:
        - maxSkew: 1  # only 1 container for each zone
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: frontend
      dnsPolicy: ClusterFirst
      # pod auto healing
      restartPolicy: Always
      initContainers:
        # wait for database service up
        - name: init-postgres-service
          image: busybox:1.28
          command:
            [
              "sh",
              "-c",
              "until nslookup postgres.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for database service; sleep 2; done",
            ]
        # ensure installation of elastic agent before apiserver startup
        - name: elastic-java-agent
          image: docker.elastic.co/observability/apm-agent-java:1.12.0
          volumeMounts:
            - mountPath: /elastic/apm/agent
              name: elastic-apm-agent
          command:
            [
              "cp",
              "-v",
              "/usr/agent/elastic-apm-agent.jar",
              "/elastic/apm/agent",
            ]
      containers:
        - image: hub.brainupgrade.net/junkin/sba-apiserver:demo
          imagePullPolicy: Always
          name: sba-apiserver
          resources: {}
          # high availability (TCP probe)
          livenessProbe:  # stop route
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 1
          readinessProbe:  # detect abnormal status and report
            httpGet:
              path: /
              port: 8080
              httpHeaders:
            initialDelaySeconds: 0
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 1
          startupProbe:  # kill container and subject to pod's restartPolicy
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 75
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          env:
            - name: spring.datasource.url
              value: jdbc:postgresql://postgres:5432/app
            - name: spring.datasource.username
              valueFrom:
                secretKeyRef:
                  name: db
                  key: username
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: db
                  key: password
            - name: spring.application.name
              value: sba-apiserver
            # observability setup (event log and distributed tracing for apm)
            - name: ELASTIC_APM_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ELASTIC_APM_SERVER_URL
            - name: ELASTIC_APM_APPLICATION_PACKAGES 
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ELASTIC_APM_APPLICATION_PACKAGES
            - name: ELASTIC_APM_SERVICE_NAME 
              value: apiserver-omega
            - name: ELASTIC_APM_ENVIRONMENT 
              value: prod
            - name: ELASTIC_APM_LOG_LEVEL 
              value: DEBUG 
            - name: JAVA_TOOL_OPTIONS 
              value: -javaagent:/elastic/apm/agent/elastic-apm-agent.jar
            # observability setup (metric)
            - name: management.endpoints.web.exposure.include
              value: "*"
            - name: management.server.port
              value: "8888"
            - name: management.metrics.web.server.request.autotime.enabled
              value: "true"
            - name: management.metrics.tags.application
              value: apiserver-omega
            # usage ENV var
            - name: cloud.aws.region.static
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: cloud_aws_region_static
            - name: spring.profiles.active
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: spring_profiles_active
            - name: cloud.aws.credentials.access-key
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: cloud_aws_credentials_access_key
            - name: cloud.aws.credentials.secret-key
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: cloud_aws_credentials_secret_key
            - name: cloud.aws.end-point.uri
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: cloud_aws_endpoint_uri
            - name: cloud.aws.end-point.uri-usage
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: cloud_aws_endpoint_uri_usage
            - name: spring.mail.username
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: spring_mail_username
            - name: spring.mail.password
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: spring_mail_password
            - name: from.mail.address
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: from_mail_address
            - name: default.from.email.address
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: default_from_email_address
            - name: default.to.email.address
              valueFrom:
                secretKeyRef:
                  name: usage
                  key: default_to_email_address
          volumeMounts:
            - name: secret-vol
              mountPath: "/etc/app"
              readOnly: true
            - mountPath: /elastic/apm/agent 
              name: elastic-apm-agent
      volumes:
        - name: secret-vol
          projected:
            sources:
              - secret:
                  name: db
              - secret:
                  name: usage
        - name: elastic-apm-agent
          emptyDir: {}
status: {}
